// !!! GENERATED BY MathTool !!!
export module CopiumEngine.Math:Float3;

import CopiumEngine.Core.CoreTypes;


export namespace Copium
{

    struct Float3 final
    {
        float32 X;
        float32 Y;
        float32 Z;


        constexpr Float3() = default;
        constexpr Float3(const Float3& other) = default;

        explicit constexpr Float3(float32 scalar)
            : X(scalar)
            , Y(scalar)
            , Z(scalar)
        {}
        constexpr Float3(float32 x, float32 y, float32 z)
            : X(x)
            , Y(y)
            , Z(z)
        {}

        //- Compound
        //-- Vector | Scalar
        constexpr Float3& operator+=(float32 rhs) { X += rhs; Y += rhs; Z += rhs; return *this; }
        constexpr Float3& operator-=(float32 rhs) { X -= rhs; Y -= rhs; Z -= rhs; return *this; }
        constexpr Float3& operator*=(float32 rhs) { X *= rhs; Y *= rhs; Z *= rhs; return *this; }
        //-- Vector | Vector
        constexpr Float3& operator+=(const Float3& rhs) { X += rhs.X; Y += rhs.Y; Z += rhs.Z; return *this; }
        constexpr Float3& operator-=(const Float3& rhs) { X -= rhs.X; Y -= rhs.Y; Z -= rhs.Z; return *this; }
        constexpr Float3& operator*=(const Float3& rhs) { X *= rhs.X; Y *= rhs.Y; Z *= rhs.Z; return *this; }

        //- Unary
        friend constexpr Float3 operator-(const Float3& rhs) { return Float3(-rhs.X, -rhs.Y, -rhs.Z); }

        //- Binary
        //-- Vector | Scalar
        friend constexpr Float3 operator+(const Float3& lhs, float32 rhs) { return Float3(lhs.X + rhs, lhs.Y + rhs, lhs.Z + rhs); }
        friend constexpr Float3 operator-(const Float3& lhs, float32 rhs) { return Float3(lhs.X - rhs, lhs.Y - rhs, lhs.Z - rhs); }
        friend constexpr Float3 operator*(const Float3& lhs, float32 rhs) { return Float3(lhs.X * rhs, lhs.Y * rhs, lhs.Z * rhs); }
        //-- Scalar | Vector
        friend constexpr Float3 operator+(float32 lhs, const Float3& rhs) { return Float3(lhs + rhs.X, lhs + rhs.Y, lhs + rhs.Z); }
        friend constexpr Float3 operator-(float32 lhs, const Float3& rhs) { return Float3(lhs - rhs.X, lhs - rhs.Y, lhs - rhs.Z); }
        friend constexpr Float3 operator*(float32 lhs, const Float3& rhs) { return Float3(lhs * rhs.X, lhs * rhs.Y, lhs * rhs.Z); }
        //-- Vector | Vector
        friend constexpr Float3 operator+(const Float3& lhs, const Float3& rhs) { return Float3(lhs.X + rhs.X, lhs.Y + rhs.Y, lhs.Z + rhs.Z); }
        friend constexpr Float3 operator-(const Float3& lhs, const Float3& rhs) { return Float3(lhs.X - rhs.X, lhs.Y - rhs.Y, lhs.Z - rhs.Z); }
        friend constexpr Float3 operator*(const Float3& lhs, const Float3& rhs) { return Float3(lhs.X * rhs.X, lhs.Y * rhs.Y, lhs.Z * rhs.Z); }

        [[nodiscard]] static constexpr Float3 Zero() noexcept { return Float3(0.0f); }
        [[nodiscard]] static constexpr Float3 One() noexcept { return Float3(1.0f); }
    };

} // export namespace Copium
