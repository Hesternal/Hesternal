// !!! GENERATED BY MathTool !!!
export module CopiumEngine.Math:Float3x3;

import :Float3;
import CopiumEngine.Core.CoreTypes;


export namespace Copium
{

    struct Float3x3 final
    {
        Float3 C0;
        Float3 C1;
        Float3 C2;


        constexpr Float3x3() = default;
        constexpr Float3x3(const Float3x3& other) = default;

        explicit constexpr Float3x3(float32 scalar)
            : C0(scalar)
            , C1(scalar)
            , C2(scalar)
        {}
        constexpr Float3x3(const Float3& c0, const Float3& c1, const Float3& c2)
            : C0(c0)
            , C1(c1)
            , C2(c2)
        {}
        constexpr Float3x3(float32 m00, float32 m10, float32 m20,
                           float32 m01, float32 m11, float32 m21,
                           float32 m02, float32 m12, float32 m22)
            : C0(m00, m10, m20)
            , C1(m01, m11, m21)
            , C2(m02, m12, m22)
        {}

        //- Compound
        //-- Vector | Scalar
        constexpr Float3x3& operator+=(float32 rhs) { C0 += rhs; C1 += rhs; C2 += rhs; return *this; }
        constexpr Float3x3& operator-=(float32 rhs) { C0 -= rhs; C1 -= rhs; C2 -= rhs; return *this; }
        constexpr Float3x3& operator*=(float32 rhs) { C0 *= rhs; C1 *= rhs; C2 *= rhs; return *this; }
        //-- Vector | Vector
        constexpr Float3x3& operator+=(const Float3x3& rhs) { C0 += rhs.C0; C1 += rhs.C1; C2 += rhs.C2; return *this; }
        constexpr Float3x3& operator-=(const Float3x3& rhs) { C0 -= rhs.C0; C1 -= rhs.C1; C2 -= rhs.C2; return *this; }
        constexpr Float3x3& operator*=(const Float3x3& rhs) { C0 *= rhs.C0; C1 *= rhs.C1; C2 *= rhs.C2; return *this; }

        //- Unary
        friend constexpr Float3x3 operator-(const Float3x3& rhs) { return Float3x3(-rhs.C0, -rhs.C1, -rhs.C2); }

        //- Binary
        //-- Matrix | Scalar
        friend constexpr Float3x3 operator+(const Float3x3& lhs, float32 rhs) { return Float3x3(lhs.C0 + rhs, lhs.C1 + rhs, lhs.C2 + rhs); }
        friend constexpr Float3x3 operator-(const Float3x3& lhs, float32 rhs) { return Float3x3(lhs.C0 - rhs, lhs.C1 - rhs, lhs.C2 - rhs); }
        friend constexpr Float3x3 operator*(const Float3x3& lhs, float32 rhs) { return Float3x3(lhs.C0 * rhs, lhs.C1 * rhs, lhs.C2 * rhs); }
        //-- Scalar | Matrix
        friend constexpr Float3x3 operator+(float32 lhs, const Float3x3& rhs) { return Float3x3(lhs + rhs.C0, lhs + rhs.C1, lhs + rhs.C2); }
        friend constexpr Float3x3 operator-(float32 lhs, const Float3x3& rhs) { return Float3x3(lhs - rhs.C0, lhs - rhs.C1, lhs - rhs.C2); }
        friend constexpr Float3x3 operator*(float32 lhs, const Float3x3& rhs) { return Float3x3(lhs * rhs.C0, lhs * rhs.C1, lhs * rhs.C2); }
        //-- Matrix | Matrix
        friend constexpr Float3x3 operator+(const Float3x3& lhs, const Float3x3& rhs) { return Float3x3(lhs.C0 + rhs.C0, lhs.C1 + rhs.C1, lhs.C2 + rhs.C2); }
        friend constexpr Float3x3 operator-(const Float3x3& lhs, const Float3x3& rhs) { return Float3x3(lhs.C0 - rhs.C0, lhs.C1 - rhs.C1, lhs.C2 - rhs.C2); }
        friend constexpr Float3x3 operator*(const Float3x3& lhs, const Float3x3& rhs) { return Float3x3(lhs.C0 * rhs.C0, lhs.C1 * rhs.C1, lhs.C2 * rhs.C2); }

        [[nodiscard]] static constexpr Float3x3 Zero() noexcept { return Float3x3(0.0f); }
        [[nodiscard]] static constexpr Float3x3 Identity() noexcept
        {
            return Float3x3(1.0f, 0.0f, 0.0f,
                            0.0f, 1.0f, 0.0f,
                            0.0f, 0.0f, 1.0f);
        }
    };

} // export namespace Copium
