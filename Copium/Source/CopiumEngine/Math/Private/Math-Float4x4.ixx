// !!! GENERATED BY MathTool !!!
export module CopiumEngine.Math:Float4x4;

import :Float4;
import CopiumEngine.Core.CoreTypes;


export namespace Copium
{

    struct Float4x4 final
    {
        Float4 C0;
        Float4 C1;
        Float4 C2;
        Float4 C3;


        constexpr Float4x4() = default;
        constexpr Float4x4(const Float4x4& other) = default;

        explicit constexpr Float4x4(float32 scalar)
            : C0(scalar)
            , C1(scalar)
            , C2(scalar)
            , C3(scalar)
        {}
        constexpr Float4x4(const Float4& c0, const Float4& c1, const Float4& c2, const Float4& c3)
            : C0(c0)
            , C1(c1)
            , C2(c2)
            , C3(c3)
        {}
        constexpr Float4x4(float32 m00, float32 m10, float32 m20, float32 m30,
                           float32 m01, float32 m11, float32 m21, float32 m31,
                           float32 m02, float32 m12, float32 m22, float32 m32,
                           float32 m03, float32 m13, float32 m23, float32 m33)
            : C0(m00, m10, m20, m30)
            , C1(m01, m11, m21, m31)
            , C2(m02, m12, m22, m32)
            , C3(m03, m13, m23, m33)
        {}

        //- Compound
        //-- Vector | Scalar
        constexpr Float4x4& operator+=(float32 rhs) { C0 += rhs; C1 += rhs; C2 += rhs; C3 += rhs; return *this; }
        constexpr Float4x4& operator-=(float32 rhs) { C0 -= rhs; C1 -= rhs; C2 -= rhs; C3 -= rhs; return *this; }
        constexpr Float4x4& operator*=(float32 rhs) { C0 *= rhs; C1 *= rhs; C2 *= rhs; C3 *= rhs; return *this; }
        //-- Vector | Vector
        constexpr Float4x4& operator+=(const Float4x4& rhs) { C0 += rhs.C0; C1 += rhs.C1; C2 += rhs.C2; C3 += rhs.C3; return *this; }
        constexpr Float4x4& operator-=(const Float4x4& rhs) { C0 -= rhs.C0; C1 -= rhs.C1; C2 -= rhs.C2; C3 -= rhs.C3; return *this; }
        constexpr Float4x4& operator*=(const Float4x4& rhs) { C0 *= rhs.C0; C1 *= rhs.C1; C2 *= rhs.C2; C3 *= rhs.C3; return *this; }

        //- Unary
        friend constexpr Float4x4 operator-(const Float4x4& rhs) { return Float4x4(-rhs.C0, -rhs.C1, -rhs.C2, -rhs.C3); }

        //- Binary
        //-- Matrix | Scalar
        friend constexpr Float4x4 operator+(const Float4x4& lhs, float32 rhs) { return Float4x4(lhs.C0 + rhs, lhs.C1 + rhs, lhs.C2 + rhs, lhs.C3 + rhs); }
        friend constexpr Float4x4 operator-(const Float4x4& lhs, float32 rhs) { return Float4x4(lhs.C0 - rhs, lhs.C1 - rhs, lhs.C2 - rhs, lhs.C3 - rhs); }
        friend constexpr Float4x4 operator*(const Float4x4& lhs, float32 rhs) { return Float4x4(lhs.C0 * rhs, lhs.C1 * rhs, lhs.C2 * rhs, lhs.C3 * rhs); }
        //-- Scalar | Matrix
        friend constexpr Float4x4 operator+(float32 lhs, const Float4x4& rhs) { return Float4x4(lhs + rhs.C0, lhs + rhs.C1, lhs + rhs.C2, lhs + rhs.C3); }
        friend constexpr Float4x4 operator-(float32 lhs, const Float4x4& rhs) { return Float4x4(lhs - rhs.C0, lhs - rhs.C1, lhs - rhs.C2, lhs - rhs.C3); }
        friend constexpr Float4x4 operator*(float32 lhs, const Float4x4& rhs) { return Float4x4(lhs * rhs.C0, lhs * rhs.C1, lhs * rhs.C2, lhs * rhs.C3); }
        //-- Matrix | Matrix
        friend constexpr Float4x4 operator+(const Float4x4& lhs, const Float4x4& rhs) { return Float4x4(lhs.C0 + rhs.C0, lhs.C1 + rhs.C1, lhs.C2 + rhs.C2, lhs.C3 + rhs.C3); }
        friend constexpr Float4x4 operator-(const Float4x4& lhs, const Float4x4& rhs) { return Float4x4(lhs.C0 - rhs.C0, lhs.C1 - rhs.C1, lhs.C2 - rhs.C2, lhs.C3 - rhs.C3); }
        friend constexpr Float4x4 operator*(const Float4x4& lhs, const Float4x4& rhs) { return Float4x4(lhs.C0 * rhs.C0, lhs.C1 * rhs.C1, lhs.C2 * rhs.C2, lhs.C3 * rhs.C3); }

        [[nodiscard]] static constexpr Float4x4 Zero() noexcept { return Float4x4(0.0f); }
        [[nodiscard]] static constexpr Float4x4 Identity() noexcept
        {
            return Float4x4(1.0f, 0.0f, 0.0f, 0.0f,
                            0.0f, 1.0f, 0.0f, 0.0f,
                            0.0f, 0.0f, 1.0f, 0.0f,
                            0.0f, 0.0f, 0.0f, 1.0f);
        }
    };

} // export namespace Copium
