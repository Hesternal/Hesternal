<?xml version="1.0" encoding="utf-8"?>
<Compiler Name="Msvc"
          SupportedLinkers="MsvcLinker,MsvcLibrarian"
    >
    <!-- General -->
    <BoolFlag Name="ScanSourceForModuleDependencies"
              Flag="/scanDependencies"
              Default="false"
              Description="Makes the build scan all c++ sources, not just module interface and header unit sources, for module and header units dependencies and build the full dependencies graph."
        />
    <BoolFlag Name="TranslateIncludesToImports"
              Flag="/translateInclude"
              Default="false"
              Description="Enables the compiler to translate #include directives into import directives for the available header units."
        />
    <!-- NOTE(v.matushkin): While doc says that there is /JMC- flag, in Microsoft.Build.CPPTasks.Common it only takes /JMC ? -->
    <BoolFlag Name="SupportJustMyCode"
              Flag="/JMC"
              ReverseFlag="/JMC-"
              Default="true"
              Description="Adds supporting code for enabling Just My Code debugging in this compilation unit."
        />
    <EnumFlag Name="DebugInformationFormat"
              Default="ProgramDatabase"
              Description="Specifies the type of debugging information generated by the compiler. This requires compatible linker settings. br/ The /ZI option forces both the /Gy (Enable Function-Level Linking) and /FC (Full Path of Source Code File in Diagnostics) options to be used in your compilation."
        >
        <EnumValue Name="None"
                   Description="Produces no debugging information, so compilation may be faster."
            />
        <EnumValue Name="C7Compatible"
                   Flag="/Z7"
                   Description="Produces object files that also contain full symbolic debugging information for use with the debugger."
            />
        <EnumValue Name="ProgramDatabase"
                   Flag="/Zi"
                   Description="Produces a separate PDB file that contains all the symbolic debugging information for use with the debugger."
            />
        <EnumValue Name="ProgramDatabaseForEditAndContinue"
                   Flag="/ZI"
                   Description="Similar to /Zi, but it produces a PDB file in a format that supports the Edit and Continue feature."
            />
    </EnumFlag>
    <BoolFlag Name="SuppressStartupBanner"
              Flag="/nologo"
              Default="true"
              Description="Enables the compiler to translate #include directives into import directives for the available header units."
        />
    <EnumFlag Name="WarningLevel"
              Default="Level1"
              Description="Select how strict you want the compiler to be about code errors."
        >
        <EnumValue Name="TurnOffAllWarnings"
                   Flag="/W0"
            />
        <EnumValue Name="Level1"
                   Flag="/W1"
            />
        <EnumValue Name="Level2"
                   Flag="/W2"
            />
        <EnumValue Name="Level3"
                   Flag="/W3"
            />
        <EnumValue Name="Level4"
                   Flag="/W4"
            />
        <EnumValue Name="EnableAllWarnings"
                   Flag="/Wall"
            />
    </EnumFlag>
    <BoolFlag Name="TreatWarningAsError"
              Flag="/WX"
              ReverseFlag="/WX-"
              Default="false"
              Description="Treats all compiler warnings as errors."
        />
    <EnumFlag Name="DiagnosticsFormat"
              Default="Column"
              Description="Enables rich diagnostics, with column information and source context in diagnostic messages."
        >
        <EnumValue Name="Caret"
                   Flag="/diagnostics:caret"
                   Description="Provides column information in the diagnostic message, as well as outputting the relevant line of source code with a caret indicating the offending column."
            />
        <EnumValue Name="Column"
                   Flag="/diagnostics:column"
                   Description="Additionally provides the column number within the line where the diagnostic is issued, where applicable."
            />
        <EnumValue Name="Classic"
                   Flag="/diagnostics:classic"
                   Description="Retains the prior, concise diagnostic messages with the line number."
            />
    </EnumFlag>
    <BoolFlag Name="SDLCheck"
              Flag="/sdl"
              ReverseFlag="/sdl-"
              Default="false"
              Description="Additional Security Development Lifecycle (SDL) recommended checks; includes enabling additional secure code generation features and enables extra security-relevant warnings as errors."
        />
    <BoolFlag Name="MultiProcessorCompilation"
              Flag="/MP"
              Default="true"
        />
    <BoolFlag Name="EnableASAN"
              Flag="/fsanitize=address"
              Default="false"
              Description="Compiles and links program with AddressSanitizer. Currently available for x86 and x64 builds."
        />
    <BoolFlag Name="EnableFuzzer"
              Flag="/fsanitize=fuzzer"
              Default="false"
              Description="Compiles programs with the Fuzzer. Enable AddressSanitizer for best results. Currently available for x86 and x64 builds."
        />

    <!-- Optimization -->
    <EnumFlag Name="Optimization"
              Default="Disabled"
              Description="Select option for code optimization; choose Custom to use specific optimization options."
        >
        <EnumValue Name="Custom"
            />
        <EnumValue Name="Disabled"
                   Flag="/Od"
            />
        <EnumValue Name="MinSpace"
                   Flag="/O1"
                   Description="Maximum Optimization (Favor Size). Equivalent to /Og /Os /Oy /Ob2 /Gs /GF /Gy"
            />
        <EnumValue Name="MaxSpeed"
                   Flag="/O2"
                   Description="Maximum Optimization (Favor Speed). Equivalent to /Og /Oi /Ot /Oy /Ob2 /Gs /GF /Gy"
            />
        <EnumValue Name="Full"
                   Flag="/Ox"
                   Description="Equivalent to /Og /Oi /Ot /Oy /Ob2"
            />
    </EnumFlag>
    <EnumFlag Name="InlineFunctionExpansion"
              Default="Default"
              Description="Select the level of inline function expansion for the build."
        >
        <EnumValue Name="Default"
            />
        <EnumValue Name="Disabled"
                   Flag="/Ob0"
                   Description="Disables inline expansion, which is on by default."
            />
        <EnumValue Name="OnlyExplicitInline"
                   Flag="/Ob1"
                   Description="Expands only functions marked as inline, __inline, __forceinline or __inline or, in a C++ member function, defined within a class declaration."
            />
        <EnumValue Name="AnySuitable"
                   Flag="/Ob2"
                   Description="Expands functions marked as inline or __inline and any other function that the compiler chooses (expansion occurs at the compiler's discretion, often referred to as auto-inlining)."
            />
    </EnumFlag>
    <BoolFlag Name="IntrinsicFunctions"
              Flag="/Oi"
              Default="false"
              Description="Enables intrinsic functions. Using intrinsic functions generates faster, but possibly larger, code."
        />
    <EnumFlag Name="FavorSizeOrSpeed"
              Default="Neither"
              Description="Whether to favor code size or code speed; 'Global Optimization' must be turned on."
        >
        <EnumValue Name="Neither"
                   Description="No size nor speed optimization."
            />
        <!-- NOTE(v.matushkin): https://stackoverflow.com/questions/70216761/intel-jcc-erratum-what-is-the-effect-of-prefixes-used-for-mitigation -->
        <EnumValue Name="Size"
                   Flag="/Os"
                   Description="Favor Small Code. Minimizes the size of EXEs and DLLs by instructing the compiler to favor size over speed."
            />
        <EnumValue Name="Speed"
                   Flag="/Ot"
                   Description="Favor Fast Code. Maximizes the speed of EXEs and DLLs by instructing the compiler to favor speed over size. (This is the default.)"
            />
    </EnumFlag>
    <BoolFlag Name="OmitFramePointers"
              Flag="/Oy"
              ReverseFlag="/Oy-"
              Default="false"
              Description="Suppresses creation of frame pointers on the call stack."
        />
    <BoolFlag Name="EnableFiberSafeOptimizations"
              Flag="/GT"
              Default="false"
              Description="Enables memory space optimization when using fibers and thread local storage access."
              />
    <BoolFlag Name="WholeProgramOptimization"
              Flag="/GL"
              Default="false"
              Description="Enables cross-module optimizations by delaying code generation to link time; requires that linker option 'Link Time Code Generation' be turned on."
              />

    <!-- Preprocessor -->
    <!-- NOTE(v.matushkin): Does it actually undefines everything or only MSVC predefined macros? -->
    <!-- https://docs.microsoft.com/en-us/cpp/build/reference/u-u-undefine-symbols?view=msvc-170 -->
    <BoolFlag Name="UndefineAllPreprocessorDefinitions"
              Flag="/u"
              Default="false"
              Description="Undefine all previously defined preprocessor values."
        />
    <BoolFlag Name="IgnoreStandardIncludePath"
              Flag="/X"
              Default="false"
              Description="Prevents the compiler from searching for include files in directories specified in the INCLUDE environment variables."
        />
    <BoolFlag Name="PreprocessToFile"
              Flag="/P"
              Default="false"
              Description="Preprocesses C and C++ source files and writes the preprocessed output to a file. This option suppresses compilation, thus it does not produce an .obj file."
        />
    <!-- <StringFlag
        Name="PreprocessOutputPath"
        /> -->
    <BoolFlag Name="PreprocessSuppressLineNumbers"
              Flag="/EP"
              Default="false"
              Description="Preprocess without #line directives."
        />
    <BoolFlag Name="PreprocessKeepComments"
              Flag="/C"
              Default="false"
              Description="Suppresses comment strip from source code; requires that one of the 'Preprocessing' options (/E, /P, or /EP) be set."
        />
    <BoolFlag Name="UseStandardPreprocessor"
              Flag="/Zc:preprocessor"
              ReverseFlag="/Zc:preprocessor-"
              Default="false"
              Description="Use a standard conforming preprocessor. Currently implied by /std:c11 and /std:c17. To use legacy preprocessor set this property to 'No'."
        />

    <!-- Code generation -->
    <BoolFlag Name="StringPooling"
              Flag="/GF"
              ReverseFlag="/GF-"
              Description="Enables the compiler to create a single read-only copy of identical strings in the program image and in memory during execution, resulting in smaller programs, an optimization called string pooling. /O1, /O2, and /ZI automatically set this option."
        />
    <BoolFlag Name="MinimalRebuild"
              Flag="/Gm"
              ReverseFlag="/Gm-"
              Default="false"
              Description="Enables minimal rebuild, which determines whether C++ source files that include changed C++ class definitions (stored in header (.h) files) need to be recompiled."
        />
    <EnumFlag Name="ExceptionHandling"
              Default="Sync"
              Description="Specifies the model of exception handling to be used by the compiler."
        >
        <EnumValue Name="Async"
                   Flag="/EHa"
                   Description="The exception-handling model that catches asynchronous (structured) and synchronous (C++) exceptions."
            />
        <EnumValue Name="Sync"
                   Flag="/EHsc"
                   Description="The exception-handling model that catches C++ exceptions only and tells the compiler to assume that extern C functions never throw a C++ exception."
            />
        <EnumValue Name="SyncCThrow"
                   Flag="/EHs"
                   Description="The exception-handling model that catches C++ exceptions only and tells the compiler to assume that extern C functions do throw an exception."
            />
        <EnumValue Name="False"
                   Description="No exception handling."
            />
    </EnumFlag>
    <BoolFlag Name="SmallerTypeCheck"
              Flag="/RTCc"
              Default="false"
              Description="Enable checking for conversion to smaller types, incompatible with any optimization type other than debug."
        />
    <EnumFlag Name="BasicRuntimeChecks"
              Default="Default"
              Description="Perform basic runtime error checks, incompatible with any optimization type other than debug."
        >
        <EnumValue Name="StackFrameRuntimeCheck"
                   Flag="/RTCs"
                   Description="Enables stack frame run-time error checking."
            />
        <EnumValue Name="UninitializedLocalUsageCheck"
                   Flag="/RTCu"
                   Description="Reports when a variable is used without having been initialized."
            />
        <EnumValue Name="EnableFastChecks"
                   Flag="/RTCsu"
                   Description="Both /RTCs and /RTCu"
            />
        <EnumValue Name="Default"
                   Description="Default runtime checks."
            />
    </EnumFlag>
    <EnumFlag Name="RuntimeLibrary"
              Default="MultiThreadedDLL"
              Description="Specify runtime library for linking."
        >
        <EnumValue Name="MultiThreaded"
                   Flag="/MT"
                   Description="Causes your application to use the multithread, static version of the run-time library."
            />
        <EnumValue Name="MultiThreadedDebug"
                   Flag="/MTd"
                   Description="Defines _DEBUG and _MT. This option also causes the compiler to place the library name LIBCMTD.lib into the .obj file so that the linker will use LIBCMTD.lib to resolve external symbols."
            />
        <EnumValue Name="MultiThreadedDLL"
                   Flag="/MD"
                   Description="Causes your application to use the multithread- and DLL-specific version of the run-time library. Defines _MT and _DLL and causes the compiler to place the library name MSVCRT.lib into the .obj file."
            />
        <EnumValue Name="MultiThreadedDebugDLL"
                   Flag="/MDd"
                   Description="Defines _DEBUG, _MT, and _DLL and causes your application to use the debug multithread- and DLL-specific version of the run-time library. It also causes the compiler to place the library name MSVCRTD.lib into the .obj file."
            />
    </EnumFlag>
    <EnumFlag Name="StructMemberAlignment"
              Default="Default"
              Description="Controls how the members of a structure are packed into memory and specifies the same packing for all structures in a module."
        >
        <EnumValue Name="_1Byte"
                   VcxprojName="1Byte"
                   Flag="/Zp1"
                   Description="Packs structures on 1-byte boundaries. Same as /Zp."
            />
        <EnumValue Name="_2Bytes"
                   VcxprojName="2Bytes"
                   Flag="/Zp2"
                   Description="Packs structures on 2-byte boundaries."
            />
        <EnumValue Name="_4Bytes"
                   VcxprojName="4Bytes"
                   Flag="/Zp4"
                   Description="Packs structures on 4-byte boundaries."
            />
        <EnumValue Name="_8Bytes"
                   VcxprojName="8Bytes"
                   Flag="/Zp8"
                   Description="Packs structures on 8-byte boundaries (default for x86, ARM, and ARM64)."
            />
        <EnumValue Name="_16Bytes"
                   VcxprojName="16Bytes"
                   Flag="/Zp16"
                   Description="Packs structures on 16-byte boundaries (default for x64 and ARM64EC)."
            />
        <EnumValue Name="Default"
                   Description="Default alignment settings."
            />
    </EnumFlag>
    <EnumFlag Name="BufferSecurityCheck"
              Default="True"
              Description="Detects some buffer overruns that overwrite a function's return address, exception handler address, or certain types of parameters.br/ Causing a buffer overrun is a technique used by hackers to exploit code that does not enforce buffer size restrictions."
        >
        <EnumValue Name="False"
                   Flag="/GS-"
                   Description="Disable Security Check."
            />
        <EnumValue Name="True"
                   Flag="/GS"
                   Description="Enable Security Check."
            />
    </EnumFlag>
    <EnumFlag Name="ControlFlowGuard"
              Description="Enable compiler generation of Control Flow Guard security checks. Guard security check helps detect attempts to dispatch to illegal block of code."
        >
        <EnumValue Name="Guard"
                   Flag="/guard:cf"
                   Description="Enable Security Check with Guard"
            />
        <EnumValue Name="False"
            />
    </EnumFlag>
    <BoolFlag Name="FunctionLevelLinking"
              Flag="/Gy"
              ReverseFlag="/Gy-"
              Description="Allows the compiler to package individual functions in the form of packaged functions (COMDATs). Required for edit and continue to work."
        />
    <BoolFlag Name="EnableParallelCodeGeneration"
              Flag="/Qpar"
              ReverseFlag="/Qpar-"
              Description="Allows the compiler to generate parallel code for loops identified using #pragma loop(hint_parallel[(n)]) when optimization is enabled."
        />
    <EnumFlag Name="EnableEnhancedInstructionSet"
              Default="NotSet"
              Description="Enable use of instructions found on processors that support enhanced instruction sets, e.g., the SSE, SSE2, AVX, AVX2 and AVX-512 enhancements to IA-32;br/ AVX, AVX2 and AVX-512 to x64. Currently /arch:SSE and /arch:SSE2 are only available when building for the x86 architecture.br/ If no option is specified, the compiler will use instructions found on processors that support SSE2. Use of enhanced instructions can be disabled with /arch:IA32."
        >
        <EnumValue Name="StreamingSIMDExtensions"
                   Flag="/arch:SSE"
            />
        <EnumValue Name="StreamingSIMDExtensions2"
                   Flag="/arch:SSE2"
            />
        <EnumValue Name="AdvancedVectorExtensions"
                   Flag="/arch:AVX"
            />
        <EnumValue Name="AdvancedVectorExtensions2"
                   Flag="/arch:AVX2"
            />
        <EnumValue Name="AdvancedVectorExtensions512"
                   Flag="/arch:AVX512"
            />
        <EnumValue Name="NoExtensions"
                   Flag="/arch:IA32"
            />
        <EnumValue Name="NotSet"
            />
    </EnumFlag>
    <EnumFlag Name="FloatingPointModel"
              Default="Precise"
              Description="Sets the floating point model."
        >
        <EnumValue Name="Precise"
                   Flag="/fp:precise"
                   Description="Default. Improves the consistency of floating-point tests for equality and inequality."
            />
        <EnumValue Name="Strict"
                   Flag="/fp:strict"
                   Description="The strictest floating-point model. Causes fp_contract to be OFF and fenv_access to be ON. /fp:except is implied and can be disabled by explicitly specifying /fp:except-. When used with /fp:except-, enforces strict floating-point semantics but without respect for exceptional events."
            />
        <EnumValue Name="Fast"
                   Flag="/fp:fast"
                   Description="Creates the fastest code in the majority of cases."
            />
    </EnumFlag>
    <BoolFlag Name="FloatingPointExceptions"
              Flag="/fp:except"
              ReverseFlag="/fp:except-"
              Description="Reliable floating-point exception model. Exceptions will be raised immediately after they are triggered."
        />
    <BoolFlag Name="CreateHotpatchableImage"
              Flag="/hotpatch"
              Description="When hotpatching is on, the compiler ensures that first instruction of each function is two bytes, which is required for hot patching."
        />
    <EnumFlag Name="SpectreMitigation"
              Default="False"
              Description="Spectre mitigations for CVE 2017-5753. Specifies compiler generation of instructions to mitigate certain Spectre variant 1 security vulnerabilities."
        >
        <EnumValue Name="Spectre"
                   Flag="/Qspectre"
                   Description="Enable Spectre mitigation feature for CVE 2017-5753"
            />
        <EnumValue Name="SpectreLoad"
                   Flag="/Qspectre-load"
                   Description="Enable Spectre mitigations for all load instructions"
            />
        <EnumValue Name="SpectreLoadCF"
                   Flag="/Qspectre-load-cf"
                   Description="Enable Spectre mitigations for all control flow load instructions"
            />
        <EnumValue Name="False"
                   Description="Disabled. Not set."
            />
    </EnumFlag>
    <BoolFlag Name="IntelJCCErratum"
              Flag="/QIntel-jcc-erratum"
              Default="false"
              Description="Specifies that the compiler generates instructions to mitigate the performance impact caused by the Intel Jump Conditional Code (JCC) erratum microcode update in certain Intel processors."
        />
    <BoolFlag Name="GuardEHContMetadata"
              Flag="/guard:ehcont"
              ReverseFlag="/guard:ehcont-"
              Description="Generates a sorted list of all the valid exception handling continuation targets for a binary, used during runtime for RIP validation. Currently available for x64 builds."
        />
    <BoolFlag Name="GuardSignedReturns"
              Flag="/guard:signret"
              ReverseFlag="/guard:signret-"
              Description="Enables signed returns which help detect and prevent attempts to dispatch to illegal blocks from function returns. Currently available for ARM64 builds."
        />

    <!-- Language -->
    <BoolFlag Name="DisableLanguageExtensions"
              Flag="/Za"
              Default="false"
              Description="Suppresses or enables language extensions."
        />
    <BoolFlag Name="TreatWChar_tAsBuiltInType"
              Flag="/Zc:wchar_t"
              ReverseFlag="/Zc:wchar_t-"
              Default="true"
              Description="When specified, the type wchar_t becomes a native type that maps to __wchar_t in the same way that short maps to __int16. /Zc:wchar_t is on by default."
        />
    <BoolFlag Name="ForceConformanceInForLoopScope"
              Flag="/Zc:forScope"
              ReverseFlag="/Zc:forScope-"
              Default="true"
              Description="Used to implement standard C++ behavior for the for statement loops with Microsoft extensions (/Za, /Ze (Disable Language Extensions)). /Zc:forScope is on by default."
        />
    <BoolFlag Name="RemoveUnreferencedCodeData"
              Flag="/Zc:inline"
              Default="true"
              Description="When specified, compiler no longer generates symbol information for unreferenced code and data."
        />
    <BoolFlag Name="EnforceTypeConversionRules"
              Flag="/Zc:rvalueCast"
              ReverseFlag="/Zc:rvalueCast-"
              Description="Used to identify an rvalue reference type as the result of a cast operation in accordance with the C++11 standard."
        />
    <BoolFlag Name="RuntimeTypeInfo"
              Flag="/GR"
              ReverseFlag="/GR-"
              Description="Adds code for checking C++ object types at run time (runtime type information)."
        />
    <BoolFlag Name="OpenMPSupport"
              Flag="/openmp"
              ReverseFlag="/openmp-"
              Description="Enable OpenMP 2.0 language extensions."
        />
    <EnumFlag Name="LanguageStandard"
              Default="Default"
              Description="Determines the C++ language standard the compiler will enforce."
        >
        <EnumValue Name="Default"
                   Description="Default (ISO C++14 Standard)"
            />
        <EnumValue Name="stdcpp14"
                   Flag="/std:c++14"
            />
        <EnumValue Name="stdcpp17"
                   Flag="/std:c++17"
            />
        <EnumValue Name="stdcpp20"
                   Flag="/std:c++20"
            />
        <EnumValue Name="stdcpplatest"
                   Flag="/std:c++latest"
                   Description="Preview - Features from the Latest C++ Working Draft"
            />
    </EnumFlag>
    <EnumFlag Name="LanguageStandard_C"
              Default="Default"
              Description="Determines the C language standard the compiler will enforce. It is recommended to use the latest version when possible."
        >
        <EnumValue Name="Default"
                   Description="Default (Legacy MSVC)"
            />
        <EnumValue Name="stdc11"
                   Flag="/std:c11"
                   Description="ISO C11 Standard"
            />
        <EnumValue Name="stdc17"
                   Flag="/std:c17"
                   Description="ISO C17 (2018) Standard"
            />
    </EnumFlag>
    <EnumFlag Name="ConformanceMode"
              Default="Default"
              Description="Enables or suppresses conformance mode."
        >
        <EnumValue Name="Default"
            />
        <EnumValue Name="True"
                   Flag="/permissive-"
            />
        <EnumValue Name="False"
                   Flag="/permissive"
            />
    </EnumFlag>

    <!-- Precompiled Header -->
    <EnumFlag Name="PrecompiledHeader"
              Default="NotUsing"
              Description="Create/Use Precompiled Header : Enables creation or use of a precompiled header during the build."
        >
        <EnumValue Name="Create"
                   Flag="/Yc"
                   Description="Instructs the compiler to create a precompiled header (.pch) file that represents the state of compilation at a certain point."
            />
        <EnumValue Name="Use"
                   Flag="/Yu"
                   Description="Instructs the compiler to use an existing precompiled header (.pch) file in the current compilation."
            />
        <EnumValue Name="NotUsing"
                   Description="Not Using Precompiled Headers"
            />
    </EnumFlag>

    <!-- External Includes -->
    <BoolFlag Name="TreatAngleIncludeAsExternal"
              Flag="/external:anglebrackets"
              Default="false"
              Description="Specifies whether to treat files included with angle brackets as external."
        />
    <EnumFlag Name="ExternalWarningLevel"
              Default="InheritWarningLevel"
              Description="Select how strict you want the compiler to be about code errors in external headers."
        >
        <EnumValue Name="TurnOffAllWarnings"
                   Flag="/external:W0"
            />
        <EnumValue Name="Level1"
                   Flag="/external:W1"
            />
        <EnumValue Name="Level2"
                   Flag="/external:W2"
            />
        <EnumValue Name="Level3"
                   Flag="/external:W3"
            />
        <EnumValue Name="Level4"
                   Flag="/external:W4"
            />
        <EnumValue Name="InheritWarningLevel"
                   Description="Inherit Project Warning Level"
            />
    </EnumFlag>
    <BoolFlag Name="ExternalTemplatesDiagnostics"
        Flag="/external:templates-"
        Description="Specifies whether to evaluate warning level across template instantiation chain."
        />
    <BoolFlag Name="DisableAnalyzeExternal"
        Flag="/analyze:external-"
        Default="false"
        Description="Disables code analysis for external headers."
        />

    <!-- Advanced -->
    <EnumFlag Name="CallingConvention"
        Default="Cdecl"
        Description="Select the default calling convention for your application (can be overridden by function)."
        >
        <EnumValue Name="Cdecl"
            Flag="/Gd"
            Description="Specifies the __cdecl calling convention for all functions except C++ member functions and functions marked __stdcall or __fastcall."
            />
        <EnumValue Name="FastCall"
            Flag="/Gr"
            Description="Specifies the __fastcall calling convention for all functions except C++ member sfunctions and functions marked __cdecl or __stdcall. All __fastcall functions must have prototypes."
            />
        <EnumValue Name="StdCall"
            Flag="/Gz"
            Description="Specifies the __stdcall calling convention for all functions except C++ member functions and functions marked __cdecl or __fastcall. All __stdcall functions must have prototypes."
            />
        <EnumValue Name="VectorCall"
            Flag="/Gv"
            Description="Specifies the __vectorcall calling convention for all functions except C++ member functions and functions marked __cdecl, __fastcall, or __stdcall. All __vectorcall functions must have prototypes."
            />
    </EnumFlag>
    <BoolFlag Name="ShowIncludes"
        Flag="/showIncludes"
        Default="false"
        Description="Generates a list of include files with compiler output."
        />
    <BoolFlag Name="UseFullPaths"
        Flag="/FC"
        Default="true"
        Description="Use full paths in diagnostic messages."
        />
    <BoolFlag Name="OmitDefaultLibName"
        Flag="/Zl"
        Default="false"
        Description="Omits the default C runtime library name from the .obj file. By default, the compiler puts the name of the library into the .obj file to direct the linker to the correct library."
        />
</Compiler>
